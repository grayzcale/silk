"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[934],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(a),u=i,k=p["".concat(s,".").concat(u)]||p[u]||g[u]||r;return a?n.createElement(k,l(l({ref:t},d),{},{components:a})):n.createElement(k,l({ref:t},d))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<r;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},70238:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var n=a(87462),i=(a(67294),a(3905));const r={sidebar_position:4},l="Writing Packages",o={unversionedId:"getting_started/writing_packages",id:"getting_started/writing_packages",title:"Writing Packages",description:"Writing SILK packages is as easy as writing any typical ModuleScript but with extra functionality. Just like a ModuleScript, a package is allowed to return any datatype. However, when returning a table, you can choose to include any extra meta data which will be used internally to provide extra functionality.",source:"@site/docs/getting_started/writing_packages.md",sourceDirName:"getting_started",slug:"/getting_started/writing_packages",permalink:"/silk/docs/getting_started/writing_packages",draft:!1,editUrl:"https://github.com/wicked-wlzard/silk/edit/master/docs/getting_started/writing_packages.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Accessing SILK",permalink:"/silk/docs/getting_started/accessing_silk"}},s={},c=[{value:"Writing a Data Store Package",id:"writing-a-data-store-package",level:3},{value:"Declaring a singleton package:",id:"declaring-a-singleton-package",level:5},{value:"Converting the package to a metatable:",id:"converting-the-package-to-a-metatable",level:5},{value:"Complete package script:",id:"complete-package-script",level:5},{value:"Using the Package",id:"using-the-package",level:3},{value:"Initializing the package:",id:"initializing-the-package",level:5}],d={toc:c},p="wrapper";function g(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"writing-packages"},"Writing Packages"),(0,i.kt)("p",null,"Writing SILK packages is as easy as writing any typical ",(0,i.kt)("inlineCode",{parentName:"p"},"ModuleScript")," but with extra functionality. Just like a ",(0,i.kt)("inlineCode",{parentName:"p"},"ModuleScript"),", a package is allowed to return any datatype. However, when returning a table, you can choose to include any extra meta data which will be used internally to provide extra functionality."),(0,i.kt)("p",null,'By default, SILK contains core packages that contain crucial functionality for any typical projects. All of these packages are documented in the API under "Included Packages."'),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"writing-a-data-store-package"},"Writing a Data Store Package"),(0,i.kt)("p",null,"This section guides you through an example of writing a minimalistic data store package to save, load, and increment user data."),(0,i.kt)("p",null,"Structuring the package as a singleton will make sure that it gets intialized ",(0,i.kt)("strong",{parentName:"p"},"once")," whenever it is accessed. To declare a singleton package, set the meta attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"__singleton")," of the table to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("h5",{id:"declaring-a-singleton-package"},"Declaring a singleton package:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"-- Declare package to be a singleton\nlocal datastore = { __singleton = true }\n\nreturn datastore\n")),(0,i.kt)("p",null,"Before writing the necessary functions to save and load data, the package requires access to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Silk")," object. Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"__initialize")," meta method, you can obtain access to ",(0,i.kt)("inlineCode",{parentName:"p"},"Silk")," and store it inside the metatable."),(0,i.kt)("h5",{id:"converting-the-package-to-a-metatable"},"Converting the package to a metatable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local datastore = { __singleton = true }\ndatastore.__index = datastore\n\n-- Gain access to the singleton class using the __initialize meta method\nfunction datastore.__initialize(silk)\n\n    -- Store Silk inside metatable\n    datastore.silk = silk\n\n    local self = setmetatable({\n        _datastore = datastore.silk.DataStoreService:GetDataStore('DATA'),\n    }, datastore)\n\n    return self\nend\n\nreturn datastore\n")),(0,i.kt)("p",null,"You can then begin writing in the various methods to load, save, and increment data..."),(0,i.kt)("h5",{id:"complete-package-script"},"Complete package script:"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"This is a minimal example that saves and loads data. It does not handle potential errors or edge cases such as when players join the game ",(0,i.kt)("em",{parentName:"p"},"before")," the ",(0,i.kt)("inlineCode",{parentName:"p"},"PlayerAdded")," connection is created.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"-- || DataStore.lua ||\n\nlocal datastore = { __singleton = true }\ndatastore.__index = datastore\n\n-- Write private function to return client key\nlocal function getId(client)\n    return `userdata_{client.UserId}`\nend\n\nfunction datastore.__initialize(silk)\n    datastore.silk = silk\n    \n    local self = setmetatable({\n        _datastore = datastore.silk.DataStoreService:GetDataStore('DATA'),\n    }, datastore)\n    \n    -- Load data when a new player joins\n    self.silk.Players.PlayerAdded:Connect(function(client)\n        self:LoadData(client)\n\n        -- Wait 3 seconds and increment coins by 100\n        task.delay(3, self.AddCoins, self, client, 100)\n    end)\n\n    -- Save data when the player leaves\n    self.silk.Players.PlayerRemoving:Connect(function(client)\n        self:SaveData(client)\n    end)\n    \n    return self\nend\n\n-- Primary data loading method\nfunction datastore:LoadData(client)\n    \n    -- Get data or set an initial value if it doesn't exist\n    local data = self._datastore:GetAsync(getId(client))\n    data = data or {coins = 100}\n    \n    -- Create leaderstats to display coins\n    local leaderstats = self.silk.new('Folder', client).Name('leaderstats')()\n    self.silk.new('IntValue', leaderstats).Name('Coins').Value(data.coins)\n    \n    print(`Loaded data for {client.Name}!`)\nend\n\n-- Primary method to save data\nfunction datastore:SaveData(client)\n\n    -- Read data from leaderstats\n    local data = {coins = client.leaderstats.Coins.Value}\n\n    -- Save data\n    self._datastore:SetAsync(getId(client), data)\n\n    print(`Saved data for {client.Name}!`)\nend\n\n-- Increments coins in the leaderstats\nfunction datastore:AddCoins(client, amount)\n    client.leaderstats.Coins.Value += amount\nend\n\nreturn datastore\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"using-the-package"},"Using the Package"),(0,i.kt)("p",null,"To use the package, first create a ",(0,i.kt)("inlineCode",{parentName:"p"},"Folder")," somewhere in your project and move the package script inside it. Append the directory of the folder inside your initializer script using ",(0,i.kt)("inlineCode",{parentName:"p"},"Silk.AppendPackages")," and initialize the package using ",(0,i.kt)("inlineCode",{parentName:"p"},"Silk.InitPackage"),", which will then execute the ",(0,i.kt)("inlineCode",{parentName:"p"},"__initialize")," meta method."),(0,i.kt)("h5",{id:"initializing-the-package"},"Initializing the package:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"-- || initializer.server.lua ||\n\nlocal silk = require(game:GetService('ReplicatedStorage'):WaitForChild('silk'))\n\nsilk:AppendPackages{\n\n    -- This folder contains the package 'DataStore'\n    silk.ServerStorage:WaitForChild('PrivatePackages'),\n}\n\n-- Initialize the package\nsilk:InitPackage('DataStore')\n\nsilk:Weave()\n\n")))}g.isMDXComponent=!0}}]);
[{"title":"Client","type":0,"sectionRef":"#","url":"/silk/api/Client","content":"On this page Client","keywords":""},{"title":"Getting Started with SILK","type":0,"sectionRef":"#","url":"/silk/docs/intro","content":"Getting Started with SILK","keywords":""},{"title":"Package","type":0,"sectionRef":"#","url":"/silk/api/Package","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Package","url":"/silk/api/Package#properties","content":" "},{"title":"__singleton​","type":1,"pageTitle":"Package","url":"/silk/api/Package#__singleton","content":"&lt;/&gt; Package.__singleton: boolean An optional meta attribute that can be included in any package. If set to true, a cached reference to the package is returned whenever the package is referenced. info If Package.__initialize is also provided, the return value recieved after calling this method is cached instead. "},{"title":"Functions​","type":1,"pageTitle":"Package","url":"/silk/api/Package#functions","content":" "},{"title":"__initialize​","type":1,"pageTitle":"Package","url":"/silk/api/Package#__initialize","content":"&lt;/&gt; Package.__initialize(silk: Silk) → any An optional meta function that can be included in any package. The typical usecase for this is when silk is needed to perform futher intiailizations inside the package and to provide a simple, non-desrutive way for the package to access the main class. "},{"title":"Silk","type":0,"sectionRef":"#","url":"/silk/api/Silk","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Silk","url":"/silk/api/Silk#types","content":" "},{"title":"Service​","type":1,"pageTitle":"Silk","url":"/silk/api/Silk#Service","content":"&lt;/&gt; type Service = Instance  Default Roblox service as an Instance. Getting a Service: local replicatedStorage = silk.ReplicatedStorage Limitation You may recieve an error while trying to get some services, this is because the list of services is currently incomplete. To fix this, open the modulescript services and manually add it in. "},{"title":"Functions​","type":1,"pageTitle":"Silk","url":"/silk/api/Silk#functions","content":" "},{"title":"waitFor​","type":1,"pageTitle":"Silk","url":"/silk/api/Silk#waitFor","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields utility &lt;/&gt; Silk.waitFor( objects: table, timeout?: number ) → Instance  silk.waitFor({workspace, 'Baseplate' }, 10) This is a custom wrapper function for the .WaitForChild method. Use this utility function to simplify your code and avoid long chains of .WaitForChild calls. -- simplify this A:WaitForChild('B'):WaitForChild('C'):WaitForChild('D') -- to this silk.waitFor{ A, 'B', 'C', 'D' }   "},{"title":"getScript​","type":1,"pageTitle":"Silk","url":"/silk/api/Silk#getScript","content":"utility &lt;/&gt; Silk.getScript() → Script  This utility function returns a reference to the primary Silk object. You can use it to easily access the contents of the modulescript, for instance, when appending essential packages to the framework. silk:AppendPackages{ silk.getScript():WaitForChild('essentials') }   "},{"title":"Server​","type":1,"pageTitle":"Silk","url":"/silk/api/Silk#Server","content":"&lt;/&gt; Silk:Server() → boolean Returns true if current execution is taking place on the server.  "},{"title":"GetService​","type":1,"pageTitle":"Silk","url":"/silk/api/Silk#GetService","content":"&lt;/&gt; Silk:GetService(service: string) → Instance  When Gets a service as Instance and stores reference in cache. "}]